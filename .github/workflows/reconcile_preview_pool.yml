name: Reconcile Preview Pool

on:
  schedule:
    - cron: '0 * * * *'  # Run hourly
  workflow_dispatch:

env:
  TF_IN_AUTOMATION: true
  TF_HTTP_RETRY_WAIT_MIN: 1
  TF_HTTP_RETRY_WAIT_MAX: 30
  TF_HTTP_RETRY_MAX: 5

jobs:
  reconcile-preview-pool:
    name: Reconcile Preview Pool
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check open pull requests
      id: check-prs
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: 'Namra2511',
            repo: 'test-crud-app',
            state: 'open'
          });
          
          const nonDraftPrs = prs.filter(pr => !pr.draft);
          const prCount = nonDraftPrs.length;
          const needsPreviewPool = prCount > 0;
          
          core.setOutput('pr-count', prCount);
          core.setOutput('needs-preview-pool', needsPreviewPool);
          
          return { prCount, needsPreviewPool };
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false
        
    - name: Initialize Terraform
      run: terraform init
      
    - name: Detect current infrastructure state
      id: current-status
      run: |
        # Check actual infrastructure state using terraform show
        set +e
        terraform show -json | jq -r '.values.root_module.child_modules[]? | select(.address=="module.digital_ocean") | .resources[]? | select(.type=="digitalocean_kubernetes_node_pool" and .name=="do_cluster_preview_pool") | .address' > /dev/null 2>&1
        
        if [ $? -eq 0 ]; then
          # Preview pool exists in state
          CURRENT_STATE=1
          echo "currently-enabled=1" >> $GITHUB_OUTPUT
        else
          # Preview pool does not exist in state  
          CURRENT_STATE=0
          echo "currently-enabled=0" >> $GITHUB_OUTPUT
        fi
        set -e
        
        echo "Infrastructure state: $CURRENT_STATE (0=disabled, 1=enabled)"
        
    - name: Determine required state
      id: required-state
      run: |
        if [ "${{ steps.check-prs.outputs.needs-preview-pool }}" == "true" ]; then
          REQUIRED_STATE=1
          echo "required-state=1" >> $GITHUB_OUTPUT
        else
          REQUIRED_STATE=0  
          echo "required-state=0" >> $GITHUB_OUTPUT
        fi
        
        echo "Required state: $REQUIRED_STATE (0=disabled, 1=enabled)"
        
    - name: Enable preview pool
      if: steps.required-state.outputs.required-state == '1' && steps.current-status.outputs.currently-enabled == '0'
      run: |
        echo "Toggling: 0 → 1 (Enabling preview pool)"
        terraform apply -auto-approve \
          -var="enable_preview_pool=true" \
          -var="do_token=${{ secrets.DO_TOKEN }}" \
          -var="do_cluster_name=${{ secrets.DO_CLUSTER_NAME }}" \
          -var="do_alert_email=${{ secrets.DO_ALERT_EMAIL }}" \
          -var="do_cluster_version=${{ secrets.DO_CLUSTER_VERSION }}" \
          -var="preview_node_size=${{ secrets.PREVIEW_NODE_SIZE }}" \
          -var="cluster_issuer_email=${{ secrets.CLUSTER_ISSUER_EMAIL }}"
          
    - name: Disable preview pool
      if: steps.required-state.outputs.required-state == '0' && steps.current-status.outputs.currently-enabled == '1'
      run: |
        echo "Toggling: 1 → 0 (Disabling preview pool)"
        terraform apply -auto-approve \
          -var="enable_preview_pool=false" \
          -var="do_token=${{ secrets.DO_TOKEN }}" \
          -var="do_cluster_name=${{ secrets.DO_CLUSTER_NAME }}" \
          -var="do_alert_email=${{ secrets.DO_ALERT_EMAIL }}" \
          -var="do_cluster_version=${{ secrets.DO_CLUSTER_VERSION }}" \
          -var="preview_node_size=${{ secrets.PREVIEW_NODE_SIZE }}" \
          -var="cluster_issuer_email=${{ secrets.CLUSTER_ISSUER_EMAIL }}"
          
    - name: Generate summary
      if: always()
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## Preview Pool Reconciliation
        
        | Metric | Value |
        |--------|-------|
        | Open PRs | ${{ steps.check-prs.outputs.pr-count }} |
        | Preview Pool Needed | ${{ steps.check-prs.outputs.needs-preview-pool }} |
        | Currently Enabled | ${{ steps.current-status.outputs.currently-enabled }} |
        
        EOF
        
        if [ "${{ steps.required-state.outputs.required-state }}" != "${{ steps.current-status.outputs.currently-enabled }}" ]; then
          if [ "${{ steps.required-state.outputs.required-state }}" == "1" ]; then
            echo "**Action:** Enabled preview pool" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Action:** Disabled preview pool" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "**Action:** No changes required" >> $GITHUB_STEP_SUMMARY
        fi
