name: Reconcile Preview Pool

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger

# Prevent concurrent runs to avoid state conflicts
concurrency:
  group: terraform-preview-pool-reconcile
  cancel-in-progress: false

jobs:
  reconcile-preview-pool:
    name: Auto-manage Preview Pool
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check Open PRs in App Repository
      id: check-prs
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            // Get open PRs from the flask-react-template repository
            const { data: prs } = await github.rest.pulls.list({
              owner: 'jalantechnologies',
              repo: 'flask-react-template',
              state: 'open'
            });
            
            // Filter out draft PRs
            const nonDraftPrs = prs.filter(pr => !pr.draft);
            const prCount = nonDraftPrs.length;
            
            console.log(`Found ${prCount} open non-draft PRs in flask-react-template`);
            
            // Log PR details for debugging
            nonDraftPrs.forEach(pr => {
              console.log(`- PR #${pr.number}: ${pr.title} (${pr.user.login})`);
            });
            
            // Set outputs
            core.setOutput('pr-count', prCount);
            core.setOutput('needs-preview-pool', prCount > 0 ? 'true' : 'false');
            
            return {
              prCount: prCount,
              needsPreviewPool: prCount > 0
            };
          } catch (error) {
            console.error('Error checking PRs:', error);
            core.setFailed(`Failed to check PRs: ${error.message}`);
          }
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false  # Disable wrapper for better error handling
        
    - name: Terraform Init
      run: |
        echo "🔧 Initializing Terraform..."
        terraform init
        echo "✅ Terraform initialization completed"
        
    - name: Terraform Validate
      run: |
        echo "🔍 Validating Terraform configuration..."
        terraform validate
        echo "✅ Terraform configuration is valid"
      
    - name: Detect current infrastructure state
      id: current-status
      shell: bash
      run: |
        set +e  # Explicitly disable exit on error
        echo "🔍 Detecting current preview pool state..."
        
        # Check actual infrastructure state using terraform
        # Variables are automatically loaded from Terraform Cloud workspace
        echo "🔧 Running terraform plan to detect current state..."
        terraform plan \
          -var="enable_preview_pool=true" \
          -detailed-exitcode \
          > plan_output.txt 2>&1
        
        EXIT_CODE=$?
        echo "📊 Terraform plan exit code: $EXIT_CODE"
        
        # Show some plan output for debugging if there's an error
        if [ $EXIT_CODE -ne 0 ] && [ $EXIT_CODE -ne 2 ]; then
          echo "📋 Plan output (first 50 lines):"
          head -50 plan_output.txt || true
        fi
        
        # Handle different exit codes properly
        case $EXIT_CODE in
          0)
            echo "✅ Preview pool is already enabled (no changes needed)"
            echo "currently-enabled=1" >> $GITHUB_OUTPUT
            ;;
          2)
            echo "ℹ️ Preview pool is currently disabled (changes needed to enable)"
            echo "currently-enabled=0" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Terraform plan failed with exit code $EXIT_CODE"
            echo "📋 Full plan output:"
            cat plan_output.txt || true
            exit 1
            ;;
        esac
        
        echo "🎯 Current state detection completed"
        
    - name: Show Plan Before Enabling
      if: steps.check-prs.outputs.needs-preview-pool == 'true' && steps.current-status.outputs.currently-enabled == '0'
      run: |
        echo "📋 Terraform plan to enable preview pool:"
        terraform plan -var="enable_preview_pool=true" -no-color
        
    - name: Enable Preview Pool
      if: steps.check-prs.outputs.needs-preview-pool == 'true' && steps.current-status.outputs.currently-enabled == '0'
      run: |
        echo "🚀 Enabling preview pool - found ${{ steps.check-prs.outputs.pr-count }} open PRs"
        echo "💰 This will incur ~$14/month in costs"
        
        # Variables are automatically loaded from Terraform Cloud workspace
        terraform apply -auto-approve \
          -var="enable_preview_pool=true"
        
        if [ $? -eq 0 ]; then
          echo "✅ Preview pool successfully enabled"
          echo "🎯 Preview environment is now available for PR testing"
        else
          echo "❌ Failed to enable preview pool"
          exit 1
        fi
          
    - name: Show Plan Before Disabling
      if: steps.check-prs.outputs.needs-preview-pool == 'false' && steps.current-status.outputs.currently-enabled == '1'
      run: |
        echo "📋 Terraform plan to disable preview pool:"
        terraform plan -var="enable_preview_pool=false" -no-color
        
    - name: Disable Preview Pool
      if: steps.check-prs.outputs.needs-preview-pool == 'false' && steps.current-status.outputs.currently-enabled == '1'
      run: |
        echo "💰 Disabling preview pool - no open PRs found"
        echo "💵 This will save ~$14/month in costs"
        
        # Variables are automatically loaded from Terraform Cloud workspace
        terraform apply -auto-approve \
          -var="enable_preview_pool=false"
        
        if [ $? -eq 0 ]; then
          echo "✅ Preview pool successfully disabled"
          echo "💰 Cost savings activated - preview resources destroyed"
        else
          echo "❌ Failed to disable preview pool"
          exit 1
        fi
          
    - name: No Action Needed
      if: (steps.check-prs.outputs.needs-preview-pool == 'true' && steps.current-status.outputs.currently-enabled == '1') || (steps.check-prs.outputs.needs-preview-pool == 'false' && steps.current-status.outputs.currently-enabled == '0')
      run: |
        echo "ℹ️ Infrastructure state matches requirements - no action needed"
        if [ "${{ steps.check-prs.outputs.needs-preview-pool }}" == "true" ]; then
          echo "✅ Preview pool already enabled for ${{ steps.check-prs.outputs.pr-count }} open PRs"
          echo "🎯 Preview environment is ready for development"
        else
          echo "✅ Preview pool already disabled - no open PRs detected"
          echo "💰 Cost optimization is active - no unnecessary resources running"
        fi
        
    - name: Cleanup Temporary Files
      if: always()
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f plan_output.txt || true
        echo "✅ Cleanup completed"
        
    - name: Workflow Summary
      if: always()
      run: |
        echo "## 📊 Reconciliation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: jalantechnologies/flask-react-template" >> $GITHUB_STEP_SUMMARY
        echo "- **Open PRs**: ${{ steps.check-prs.outputs.pr-count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview pool needed**: ${{ steps.check-prs.outputs.needs-preview-pool }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Currently enabled**: ${{ steps.current-status.outputs.currently-enabled }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-prs.outputs.needs-preview-pool }}" == "true" ] && [ "${{ steps.current-status.outputs.currently-enabled }}" == "0" ]; then
          echo "- **Action taken**: 🚀 Enabled preview pool" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.check-prs.outputs.needs-preview-pool }}" == "false" ] && [ "${{ steps.current-status.outputs.currently-enabled }}" == "1" ]; then
          echo "- **Action taken**: 💰 Disabled preview pool (saving ~$14/month)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Action taken**: ℹ️ No change needed" >> $GITHUB_STEP_SUMMARY
        fi
